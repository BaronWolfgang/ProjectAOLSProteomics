~ replace(replace(., is.infinite(.) & . < 0, min(.[is.finite(.)], na.rm = TRUE)), is.na(.), 0)
)
)
heatmap_full %>%
filter(!is.na(Genes)) %>%
distinct(Genes) %>%
column_to_rownames("Genes") %>%
mutate(
across(
everything(),
~ replace(replace(., is.infinite(.) & . < 0, min(.[is.finite(.)], na.rm = TRUE)), is.na(.), 0)
)
)
heatmap_full
heatmap_full <- doseresponse_log2FC %>%
filter(dose == 10000) %>%
select(Genes, compound, log2FC) %>%
pivot_wider(names_from = compound, values_from = log2FC)
heatmap_full
heatmap_full %>%
filter(!is.na(Genes)) %>%
distinct(Genes, .keep_all = TRUE)
heatmap_full %>%
filter(!is.na(Genes)) %>%
distinct(Genes, .keep_all = TRUE) %>%
column_to_rownames("Genes") %>%
mutate(
across(
everything(),
~ replace(replace(., is.infinite(.) & . < 0, min(.[is.finite(.)], na.rm = TRUE)), is.na(.), 0)
)
)
heatmap_full <- doseresponse_log2FC %>%
filter(dose == 10000) %>%
select(Genes, compound, log2FC) %>%
pivot_wider(names_from = compound, values_from = log2FC)
heatmap_full_matrix <- heatmap_full %>%
filter(!is.na(Genes)) %>%
distinct(Genes, .keep_all = TRUE) %>%
column_to_rownames("Genes") %>%
mutate(
across(
everything(),
~ replace(replace(., is.infinite(.) & . < 0, min(.[is.finite(.)], na.rm = TRUE)), is.na(.), 0)
)
) %>%
as.matrix()
selected_dose <- 10000
heatmap_full <- doseresponse_log2FC %>%
filter(dose == selected_dose) %>%
select(Genes, compound, log2FC) %>%
pivot_wider(names_from = compound, values_from = log2FC)
heatmap_full_matrix <- heatmap_full %>%
filter(!is.na(Genes)) %>%
distinct(Genes, .keep_all = TRUE) %>%
column_to_rownames("Genes") %>%
mutate(
across(
everything(),
~ replace(replace(., is.infinite(.) & . < 0, min(.[is.finite(.)], na.rm = TRUE)), is.na(.), 0)
)
) %>%
as.matrix()
pheatmap(
heatmap_full,
color = colorRampPalette(c("blue", "white", "red"))(100),
cluster_rows = TRUE,
cluster_cols = TRUE,
main = "Hierarchical Clustering of log2FC (10,000 nm vs 0,1 nm)",
na_col = "grey80",
show_rownames = F,  # Remove row labels
show_colnames = F   # Remove column labels
)
selected_dose <- 10000
heatmap_full <- doseresponse_log2FC %>%
filter(dose == selected_dose) %>%
select(Genes, compound, log2FC) %>%
pivot_wider(names_from = compound, values_from = log2FC)
heatmap_full_matrix <- heatmap_full %>%
filter(!is.na(Genes)) %>%
distinct(Genes, .keep_all = TRUE) %>%
column_to_rownames("Genes") %>%
mutate(
across(
everything(),
~ replace(replace(., is.infinite(.) & . < 0, min(.[is.finite(.)], na.rm = TRUE)), is.na(.), 0)
)
) %>%
as.matrix()
pheatmap(
heatmap_full_matrix,
color = colorRampPalette(c("blue", "white", "red"))(100),
cluster_rows = TRUE,
cluster_cols = TRUE,
main = "Hierarchical Clustering of log2FC (10,000 nm vs 0,1 nm)",
na_col = "grey80",
show_rownames = F,  # Remove row labels
show_colnames = F   # Remove column labels
)
n_compounds <- 5
selected_compounds <- compound_ranked_regulated[1:n_compounds]
heatmap_data <- doseresponse_log2FC %>%
filter(!is.na(Genes), compound %in% selected_compounds) %>%
mutate(compound_dose = paste(compound, dose, sep = "_")) %>%
select(Genes, compound_dose, log2FC) %>%
pivot_wider(names_from = compound_dose, values_from = log2FC)
heatmap_data
heatmap_data_matrix <- heatmap_data %>%
column_to_rownames("Genes") %>%
mutate(
across(
everything(),
~ replace(replace(., is.infinite(.) & . < 0, min(.[is.finite(.)], na.rm = TRUE)), is.na(.), 0)
)
) %>%
as.matrix()
conc_colnames <- heatmap_data %>%
select(-Genes) %>%
colnames() %>%
unique()
compound_group <- data.frame(
compound = rep(selected_compounds, each = 5)
) %>%
left_join(compounds_with_MoA %>% select(compound, Type_simp),
by = "compound")
rownames(compound_group) <- colnames(heatmap_data_matrix)
#compound_colors_subset <- compound_colors %>%
#  filter(
#    compound %in% compound_group$compound,
#    Type_simp %in% compound_group$Type_simp
#  )
colnames(compound_group) <- c("Compound", "Type")
# Generate annotation colors for compounds and types
#annotation_colors <- list(
#  Compound = setNames(compound_colors_subset$compound_color, compound_colors_subset$compound),
#  Type = setNames(type_palette[compound_group$Type], compound_group$Type)
#)
# Plot
pheatmap(
heatmap_data_matrix,
color = colorRampPalette(c("blue", "white", "red"))(100),
cluster_rows = TRUE,
cluster_cols = TRUE,
main = "Hierarchical Clustering of log2FC for Selected Compounds",
na_col = "grey80",
show_rownames = FALSE,
show_colnames = TRUE,
annotation_col = compound_group,
#annotation_colors = annotation_colors,
#annotation_names_col = FALSE,
legend_labels = c("Compound", "Type")
)
compound_group
heatmap_full
compound_group
heatmap_full
doseresponse_log2FC
compound_ranked_regulated
selected_dose <- 10000
heatmap_full <- doseresponse_log2FC %>%
filter(dose == selected_dose) %>%
select(Genes, compound, log2FC) %>%
pivot_wider(names_from = compound, values_from = log2FC)
heatmap_full_matrix <- heatmap_full %>%
filter(!is.na(Genes)) %>%
distinct(Genes, .keep_all = TRUE) %>%
column_to_rownames("Genes") %>%
mutate(
across(
everything(),
~ replace(replace(., is.infinite(.) & . < 0, min(.[is.finite(.)], na.rm = TRUE)), is.na(.), 0)
)
) %>%
as.matrix()
compound_group_full <- data.frame(
compound = compound_ranked_regulated
) %>%
left_join(compounds_with_MoA %>% select(compound, Type_simp),
by = "compound")
rownames(compound_group) <- colnames(heatmap_full_matrix)
data.frame(
compound = compound_ranked_regulated
) %>%
left_join(compounds_with_MoA %>% select(compound, Type_simp),
by = "compound")
compound_group_full <- data.frame(
compound = compound_ranked_regulated
) %>%
left_join(compounds_with_MoA %>% select(compound, Type_simp),
by = "compound")
rownames(compound_group_full) <- colnames(heatmap_full_matrix)
compound_group_full
doseresponse_log2FC
data.frame(
compound = colnames(heatmap_full_matrix)
) %>%
left_join(compounds_with_MoA %>% select(compound, Type_simp),
by = "compound")
compound_group_full <- data.frame(
compound = colnames(heatmap_full_matrix)
) %>%
left_join(compounds_with_MoA %>% select(compound, Type_simp),
by = "compound")
rownames(compound_group_full) <- colnames(heatmap_full_matrix)
compound_group_full <- data.frame(
compound = colnames(heatmap_full_matrix)
) %>%
left_join(compounds_with_MoA %>% select(compound, Type_simp),
by = "compound")
rownames(compound_group_full) <- colnames(heatmap_full_matrix)
compound_group_full
selected_dose <- 10000
heatmap_full <- doseresponse_log2FC %>%
filter(dose == selected_dose) %>%
select(Genes, compound, log2FC) %>%
pivot_wider(names_from = compound, values_from = log2FC)
heatmap_full_matrix <- heatmap_full %>%
filter(!is.na(Genes)) %>%
distinct(Genes, .keep_all = TRUE) %>%
column_to_rownames("Genes") %>%
mutate(
across(
everything(),
~ replace(replace(., is.infinite(.) & . < 0, min(.[is.finite(.)], na.rm = TRUE)), is.na(.), 0)
)
) %>%
as.matrix()
compound_group_full <- data.frame(
compound = colnames(heatmap_full_matrix)
) %>%
left_join(compounds_with_MoA %>% select(compound, Type_simp),
by = "compound") %>%
select(-compound)
rownames(compound_group_full) <- colnames(heatmap_full_matrix)
compound_group_full
pheatmap(
heatmap_full_matrix,
color = colorRampPalette(c("blue", "white", "red"))(100),
cluster_rows = TRUE,
cluster_cols = TRUE,
main = paste0("Hierarchical Clustering of log2FC ", selected_dose, " (nm)"),
na_col = "grey80",
show_rownames = F,  # Remove row labels
show_colnames = F,   # Remove column labels
annotation_col = compound_group_full
)
selected_dose <- 10000
heatmap_full <- doseresponse_log2FC %>%
filter(dose == selected_dose) %>%
select(Genes, compound, log2FC) %>%
pivot_wider(names_from = compound, values_from = log2FC)
heatmap_full_matrix <- heatmap_full %>%
filter(!is.na(Genes)) %>%
distinct(Genes, .keep_all = TRUE) %>%
column_to_rownames("Genes") %>%
mutate(
across(
everything(),
~ replace(replace(., is.infinite(.) & . < 0, min(.[is.finite(.)], na.rm = TRUE)), is.na(.), 0)
)
) %>%
as.matrix()
compound_group_full <- data.frame(
compound = colnames(heatmap_full_matrix)
) %>%
left_join(compounds_with_MoA %>% select(compound, Type_simp),
by = "compound") %>%
select(-compound)
rownames(compound_group_full) <- colnames(heatmap_full_matrix)
colnames(compound_group_full) <-"Type"
compound_group_full
pheatmap(
heatmap_full_matrix,
color = colorRampPalette(c("blue", "white", "red"))(100),
cluster_rows = TRUE,
cluster_cols = TRUE,
main = paste0("Hierarchical Clustering of log2FC ", selected_dose, " (nm)"),
na_col = "grey80",
show_rownames = F,  # Remove row labels
show_colnames = F,   # Remove column labels
annotation_col = compound_group_full,
legend_labels = "Type"
)
selected_dose <- 100
heatmap_full <- doseresponse_log2FC %>%
filter(dose == selected_dose) %>%
select(Genes, compound, log2FC) %>%
pivot_wider(names_from = compound, values_from = log2FC)
heatmap_full_matrix <- heatmap_full %>%
filter(!is.na(Genes)) %>%
distinct(Genes, .keep_all = TRUE) %>%
column_to_rownames("Genes") %>%
mutate(
across(
everything(),
~ replace(replace(., is.infinite(.) & . < 0, min(.[is.finite(.)], na.rm = TRUE)), is.na(.), 0)
)
) %>%
as.matrix()
compound_group_full <- data.frame(
compound = colnames(heatmap_full_matrix)
) %>%
left_join(compounds_with_MoA %>% select(compound, Type_simp),
by = "compound") %>%
select(-compound)
rownames(compound_group_full) <- colnames(heatmap_full_matrix)
colnames(compound_group_full) <-"Type"
compound_group_full
pheatmap(
heatmap_full_matrix,
color = colorRampPalette(c("blue", "white", "red"))(100),
cluster_rows = TRUE,
cluster_cols = TRUE,
main = paste0("Hierarchical Clustering of log2FC ", selected_dose, " (nm)"),
na_col = "grey80",
show_rownames = F,  # Remove row labels
show_colnames = F,   # Remove column labels
annotation_col = compound_group_full,
legend_labels = "Type"
)
base_packages_to_install <- c(
"readr",
"readxl",
"tidyr",
"dplyr",
"purrr",
"ggplot2",
"drc"
)
my_packages_to_install <- c(
"conflicted",
"RCurl",
"magrittr",
"stringr",
"broom",
"tibble",
"pheatmap",
"fuzzyjoin",
"scales",
"colorspace",
"org.Hs.eg.db"
)
BiocManager_packages_to_install <- c(
"clusterProfiler" #GO term enrichment analysis from paper
)
packages_to_install <- c(base_packages_to_install, my_packages_to_install)
# Check and install packages using a for loop
for (package in packages_to_install) {
if (!requireNamespace(package, quietly = TRUE)) {
install.packages(package)
}
library(package, character.only = TRUE)
}
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
for (package in BiocManager_packages_to_install) {
if (!requireNamespace(package, quietly = TRUE)) {
BiocManager::install(package)
}
library(package, character.only = TRUE)
}
gene_ids <- bitr(genes, fromType="SYMBOL", toType="ENTREZID", OrgDb=org.Hs.eg.db)
doseresponse_log2FC
doseresponse_log2FC %>% pull(Genes) %>% unique()
all_genes <- doseresponse_log2FC %>% pull(Genes) %>% unique()
gene_ids <- bitr(all_genes, fromType="SYMBOL", toType="ENTREZID", OrgDb=org.Hs.eg.db)
go_slim <- enrichGO(gene          = gene_ids$ENTREZID,
OrgDb         = org.Hs.eg.db,
keyType       = "ENTREZID",
ont           = "BP", # Biological Process
readable      = TRUE,
pool          = TRUE)
go_slim_df <- as.data.frame(go_slim)
go_long <- go_slim_df %>%
select(ID, Description, geneID) %>%
separate_rows(geneID, sep = "/") %>%
rename(GeneSymbol = geneID,
GO_Category_ID = ID,
GO_Category_Description = Description)
base_packages_to_install <- c(
"readr",
"readxl",
"tidyr",
"dplyr",
"purrr",
"ggplot2",
"drc"
)
my_packages_to_install <- c(
"conflicted",
"RCurl",
"magrittr",
"stringr",
"broom",
"tibble",
"pheatmap",
"fuzzyjoin",
"scales",
"colorspace",
"org.Hs.eg.db"
)
BiocManager_packages_to_install <- c(
"clusterProfiler" #GO term enrichment analysis from paper
)
packages_to_install <- c(base_packages_to_install, my_packages_to_install)
# Check and install packages using a for loop
for (package in packages_to_install) {
if (!requireNamespace(package, quietly = TRUE)) {
install.packages(package)
}
library(package, character.only = TRUE)
}
conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("rename", "clusterProfiler")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
for (package in BiocManager_packages_to_install) {
if (!requireNamespace(package, quietly = TRUE)) {
BiocManager::install(package)
}
library(package, character.only = TRUE)
}
go_long <- go_slim_df %>%
select(ID, Description, geneID) %>%
separate_rows(geneID, sep = "/") %>%
rename(GeneSymbol = geneID,
GO_Category_ID = ID,
GO_Category_Description = Description)
# Check result
head(go_long)
go_slim
all_genes
all_genes <- doseresponse_log2FC %>% pull(Genes) %>% unique()
gene_ids <- bitr(all_genes, fromType="SYMBOL", toType="ENTREZID", OrgDb=org.Hs.eg.db)
go_slim <- enrichGO(gene          = gene_ids$ENTREZID,
OrgDb         = org.Hs.eg.db,
keyType       = "ENTREZID",
ont           = "BP", # Biological Process
readable      = TRUE,
pool          = TRUE)
go_slim_df <- as.data.frame(go_slim)
go_long <- go_slim_df %>%
select(ID, Description, geneID) %>%
separate_rows(geneID, sep = "/") %>%
rename(GeneSymbol = geneID,
GO_Category_ID = ID,
GO_Category_Description = Description)
# Check result
head(go_long)
# Check result
length(go_along)
# Check result
length(go_long)
# Check result
dim(go_long)
go_long
# Check result
go_long %>% select(GO_Catergory_ID) %>% table()
# Check result
go_long %>% select(GO_Category_ID) %>% table()
# Check result
go_long %>% select(GO_Category_ID) %>% unique() %>% length()
# Check result
go_long %>% select(GO_Category_ID) %>% unique() %>% length(,1)
# Check result
go_long %>% select(GO_Category_ID) %>% unique() %>% pull() %>% length()
go_slim_df
go_long
go_slim_df
go_long <- go_slim_df %>%
select(ID, Description, geneID, Count) %>%
separate_rows(geneID, sep = "/") #%>%
#rename(GeneSymbol = geneID,
#       GO_Category_ID = ID,
#       GO_Category_Description = Description)
go_long
go_slim
go_slim_df
go_slim_df %>% arrange(desc(Count))
go_long
go_long %>%
group_by(geneID) %>%
sort(Count)
go_long %>%
group_by(geneID) %>%
arrange(Count)
go_long %>%
group_by(geneID) %>%
arrange(desc(Count))
go_long %>%
group_by(geneID) %>%
arrange(desc(Count)) %>%
head(n=1)
go_long %>%
group_by(geneID) %>%
arrange(desc(Count)) %>%
slice_max(n=1)
go_long %>%
group_by(geneID) %>%
#arrange(desc(Count)) %>%
slice_max(order_by = Count, n=1, with_ties = FALSE)
go_long %>%
group_by(geneID) %>%
arrange(desc(Count)) %>%
slice_max(order_by = Count, n=1, with_ties = FALSE)
go_long %>%
group_by(geneID) %>%
slice_max(order_by = Count, n=1, with_ties = FALSE) %>%
arrange(desc(Count))
