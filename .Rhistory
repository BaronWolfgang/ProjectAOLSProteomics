AGEGROUP == 1 ~ agebin70_10y_levels[1],
AGEGROUP == 2 ~ agebin70_10y_levels[2],
AGEGROUP == 3 ~ agebin70_10y_levels[3],
AGEGROUP == 4 ~ agebin70_10y_levels[4],
AGEGROUP == 5 ~ agebin70_10y_levels[5],
AGEGROUP == 6 ~ agebin70_10y_levels[6],
AGEGROUP == 7 ~ agebin70_10y_levels[7],
AGEGROUP == 8 ~ agebin70_10y_levels[8]),
AGEGROUP = as.factor(AGEGROUP),
date = set_start_date + days(time-1),
state = factor(state, levels = c("expected_hospdeaths","simulated_hospdeaths"))
)
manaus_2w_simp_hospdeaths_predictions_with_data <- manaus_2w_simp_hospdeaths_predictions %>%
select(date, state, q50, AGEGROUP) %>%
rbind(data_hospdeaths %>%
rename(q50 = count,
date = DT_EVOLUTION) %>%
mutate(state = "data_hospdeaths") %>%
filter(date >= set_start_date,
date <= set_end_date)
) %>%
left_join(manaus_2w_simp_hospdeaths_predictions)
manaus_2w_simp_hospdeaths_predictions_with_data %>%
filter(state == "data_hospdeaths")
manaus_2w_simp_hospdeaths_predictions_with_data %>%
filter(state == "expected_hospdeaths")
manaus_2w_simp_hospdeaths_predictions_with_data %>%
mutate(AGEGROUP = factor(AGEGROUP, levels = rev(levels(AGEGROUP)))) %>%
ggplot(aes(x = date)) +
geom_ribbon(data = . %>% filter(state == "simulated_hospdeaths"), aes(y= q50, ymin = q05, ymax = q95, fill = AGEGROUP), alpha = 0.2) +
#geom_line(data = . %>% filter(state == "simulated_hospdeaths"), aes(y = q50), size = 0.8) +
geom_ribbon(data = . %>% filter(state == "expected_hospdeaths"), aes(y= q50, ymin = q05, ymax = q95, fill = AGEGROUP), alpha = 0.4) +
geom_line(data = . %>% filter(state == "expected_hospdeaths"), aes(y = q50, group = AGEGROUP), size = 0.8, color = "black") +
geom_point(data = . %>% filter(state == "data_hospdeaths"),aes(y=q50, color = AGEGROUP)) +
labs(x = "date", y = "Hospital deaths") +
#facet_wrap(~AGEGROUP, scales = "free_y") +
theme_bw()
manaus_2w_simp_hospdeaths_predictions_with_data %>%
#mutate(AGEGROUP = factor(AGEGROUP, levels = rev(levels(AGEGROUP)))) %>%
ggplot(aes(x = date)) +
geom_ribbon(data = . %>% filter(state == "simulated_hospdeaths"), aes(y= q50, ymin = q05, ymax = q95, fill = AGEGROUP), alpha = 0.2) +
#geom_line(data = . %>% filter(state == "simulated_hospdeaths"), aes(y = q50), size = 0.8) +
geom_ribbon(data = . %>% filter(state == "expected_hospdeaths"), aes(y= q50, ymin = q05, ymax = q95, fill = AGEGROUP, color = AGEGROUP), alpha = 0.3) +
geom_line(data = . %>% filter(state == "expected_hospdeaths"), aes(y = q50), size = 0.8) +
geom_point(data = . %>% filter(state == "data_hospdeaths"),aes(y=q50, color = AGEGROUP)) +
scale_color_manual(values = color_to_age_map) +
scale_fill_manual(values = color_to_age_map) +
labs(x = "date", y = "Hospital deaths") +
facet_wrap(~AGEGROUP, scales = "free_y") +
scale_x_date(date_breaks = "1 month", date_labels = "%b \n %y") +
theme_bw() +
geom_text(aes(label = AGEGROUP, x = (min(date) + (max(date) - min(date))/2)), y = Inf, vjust = 1.5, size = 8, family = "Arial", check_overlap = TRUE) + #add stip.text in figure
theme(
legend.position = "none",
#legend.title = element_text(size = 18),
#legend.text = element_text(size = 18),
#legend.position = c(0.99,-0.05),
#legend.justification = c("right", "bottom"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 20, face = "bold"),
axis.ticks = element_line(colour = "black", size = 2,),
axis.ticks.length = unit(3, "mm"),
axis.line = element_line(colour = "black", size = 1),
panel.border = element_blank(),
plot.margin = margin(1, 1, 0, 2, "cm"),
strip.placement = "inside",
strip.text = element_blank(),
strip.background = element_blank())
manaus_2w_simp_sero_predictions <- manaus_2w_updated_draws_df %>%
select(matches("^expected_serodata|^simulated_serodata")) %>%
summarise(across(everything(), list(q05 = ~quantile(., 0.025, na.rm = TRUE),
q50 = ~quantile(., 0.50, na.rm = TRUE),
q95 = ~quantile(., 0.975, na.rm = TRUE)
)
)
) %>%
pivot_longer(cols = everything(),
names_to = c("state[time_index,AGEGROUP]",".value"),
names_pattern = "(.+)_(q.+)") %>%
extract("state[time_index,AGEGROUP]",
into = c("state","time_index","AGEGROUP"),
regex = "(.+)\\[(\\d+),(\\d)\\]",
convert = TRUE) %>%
mutate(
AGEGROUP = case_when(
AGEGROUP == 1 ~ agebin70_10y_levels[2],
AGEGROUP == 2 ~ agebin70_10y_levels[3],
AGEGROUP == 3 ~ agebin70_10y_levels[4],
AGEGROUP == 4 ~ agebin70_10y_levels[5],
AGEGROUP == 5 ~ agebin70_10y_levels[6],
AGEGROUP == 6 ~ agebin70_10y_levels[7]),
AGEGROUP = as.factor(AGEGROUP),
) %>%
left_join(stan_seroprevalence_data %>%
ungroup() %>%
filter(median_date < set_end_date) %>%
group_by(AGEGROUP) %>%
#select(median_date, AGEGROUP, Positive, SampleSize) %>%
mutate(time_index = row_number()) %>%
select(median_date, time_index)
) %>%
left_join(stan_seroprevalence_data %>% select(median_date, AGEGROUP, SampleSize))
manaus_2w_simp_sero_predictions_data <- manaus_2w_simp_sero_predictions %>%
select(state, AGEGROUP, q50, median_date, SampleSize) %>%
rbind(stan_seroprevalence_data  %>%
ungroup() %>%
filter(median_date <= set_end_date) %>%
rename(q50 = Positive) %>%
mutate(state = as.factor("data_sero")) %>%
select(state, AGEGROUP, q50, median_date, SampleSize)
) %>%
left_join(manaus_2w_simp_sero_predictions)
manaus_2w_simp_sero_predictions_data
manaus_2w_simp_sero_predictions_data %>%
mutate(AGEGROUP = factor(AGEGROUP, levels = rev(levels(AGEGROUP)))) %>%
ggplot(aes(x = median_date)) +
geom_ribbon(data = . %>% filter(state == "simulated_serodata"), aes(y= q50, ymin = q05, ymax = q95, fill = AGEGROUP), alpha = 0.2) +
#geom_line(data = . %>% filter(state == "simulated_hospdeaths"), aes(y = q50), size = 0.8) +
geom_ribbon(data = . %>% filter(state == "expected_serodata"), aes(y= q50, ymin = q05, ymax = q95, fill = AGEGROUP, color = AGEGROUP), alpha = 0.3) +
geom_line(data = . %>% filter(state == "expected_serodata"), aes(y = q50), size = 0.8) +
geom_point(data = . %>% filter(state == "data_sero"),aes(y=q50, color = AGEGROUP, size = SampleSize)) +
labs(x = "date", y = "Seropositives", title = "Seropositives") +
scale_color_manual(values = color_to_age_map) +
scale_fill_manual(values = color_to_age_map) +
facet_wrap(~AGEGROUP, scales = "free_y") +
theme_bw()
manaus_2w_simp_sero_predictions_data %>%
mutate(AGEGROUP = factor(AGEGROUP, levels = rev(levels(AGEGROUP)))) %>%
ggplot(aes(x = median_date)) +
geom_ribbon(data = . %>% filter(state == "simulated_serodata"), aes(y= q50/SampleSize, ymin = q05/SampleSize, ymax = q95/SampleSize, fill = AGEGROUP), alpha = 0.2) +
#geom_line(data = . %>% filter(state == "simulated_hospdeaths"), aes(y = q50), size = 0.8) +
geom_ribbon(data = . %>% filter(state == "expected_serodata"), aes(y= q50/SampleSize, ymin = q05/SampleSize, ymax = q95/SampleSize, fill = AGEGROUP, color = AGEGROUP), alpha = 0.3) +
geom_line(data = . %>% filter(state == "expected_serodata"), aes(y = q50/SampleSize), size = 0.8) +
geom_point(data = . %>% filter(state == "data_sero"),aes(y=q50/SampleSize, color = AGEGROUP, size = SampleSize)) +
labs(x = "date", y = "Seroprevalence(%)") +
scale_x_date(date_breaks = "1 month", date_labels = "%b \n %y") +
facet_wrap(~AGEGROUP, scales = "free_y") +
scale_color_manual(values = color_to_age_map) +
scale_fill_manual(values = color_to_age_map) +
theme_bw() +
geom_text(aes(label = AGEGROUP, x = (min(median_date) + (max(median_date) - min(median_date))/2)), y = Inf, vjust = 1.5, size = 8, family = "Arial", check_overlap = TRUE) + #add stip.text in figure
guides(size = guide_legend(title = "Sample size"),
color = "none", #guide_legend(title = "Agegroup"),
fill = "none" #guide_legend(title = "Agegroup")
) +
theme(
legend.text = element_text(size = 18),
legend.title = element_text(size = 18),
#legend.position = c(0.99,-0.05),
#legend.justification = c("right", "bottom"),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.x = element_blank(),
axis.title.y = element_text(size = 20, face = "bold"),
axis.ticks = element_line(colour = "black", size = 2,),
axis.ticks.length = unit(3, "mm"),
axis.line = element_line(colour = "black", size = 1),
panel.border = element_blank(),
plot.margin = margin(1, 1, 0, 2, "cm"),
strip.placement = "inside",
strip.text = element_blank(),
strip.background = element_blank())
source("Immuno_Installation2024.R")
library(installr)
updateR()
setwd("~/BIBC/AOLS/Project")
base_packages_to_install <- c(
"readr",
"readxl",
"tidyr",
"dplyr",
"purrr",
"ggplot2",
"drc"
)
packages_to_install <- c(base_packages_to_install)
# Check and install packages using a for loop
for (package in packages_to_install) {
if (!requireNamespace(package, quietly = TRUE)) {
install.packages(package)
}
library(package, character.only = TRUE)
}
library(RCurl)
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/"
file_list <- getURL(ftp_url, dirlistonly = TRUE)
cat(file_list)
ftp_file_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/proteinGroups_fdr0.01.txt"
download.file(ftp_file_url, destfile = "proteinGroups_fdr0.01.txt", mode = "wb")
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/"
file_list <- getURL(ftp_url, dirlistonly = TRUE)
cat(file_list, sep = "\n")
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search"
file_list <- getURL(ftp_url, dirlistonly = TRUE)
cat(file_list, sep = "\n")
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/"
file_list <- getURL(ftp_url, dirlistonly = TRUE)
cat(file_list, sep = "\n")
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/Search results - Long-term performance test Jurkat"
file_list <- getURL(ftp_url, dirlistonly = TRUE)
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/"
file_list <- getURL(ftp_url, dirlistonly = TRUE)
cat(file_list, sep = "\n")
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/Search results - Long-term performance test Jurkat/"
file_list <- getURL(ftp_url, dirlistonly = TRUE)
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/"
file_list <- getURL(ftp_url, dirlistonly = TRUE)
cat(file_list, sep = "\n")
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/Search%20results%20-%20Long-term%20performance%20test%20Jurkat/proteinGroups_fdr0.01.txt"
file_list <- getURL(ftp_url, dirlistonly = TRUE)
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/"
file_list <- getURL(ftp_url, dirlistonly = TRUE)
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/"
file_list <- getURL(ftp_url, dirlistonly = TRUE)
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/"
file_list <- getURL(ftp_url, dirlistonly = TRUE)
cat(file_list, sep = "\n")
file_list
cat(file_list, sep = "\n")
URLencode("Search results - Long-term performance test Jurkat")
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/"
file_list <- getURL(ftp_url, dirlistonly = TRUE)
cat(file_list, sep = "\n")
sub_folder <- URLencode("Search results - Long-term performance test Jurkat")
ftp_url_full <- paste0("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/", sub_folder)
file_list <- getURL(ftp_url_full, dirlistonly = TRUE)
cat(file_list, sep = "\n")
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/"
file_list <- getURL(ftp_url, dirlistonly = TRUE)
cat(file_list, sep = "\n")
sub_folder <- URLencode("Search results - Long-term performance test Jurkat")
ftp_url_full <- paste0("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/", sub_folder,"/")
file_list <- getURL(ftp_url_full, dirlistonly = TRUE)
cat(file_list, sep = "\n")
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/"
sub_folder <- URLencode("Search results - Long-term performance test Jurkat")
ftp_url <- paste0("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/", sub_folder,"/proteinGroups_fdr0.01.txt")
file_list <- getURL(ftp_url_full, dirlistonly = TRUE)
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/"
sub_folder <- URLencode("Search results - Long-term performance test Jurkat")
ftp_url <- paste0("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/", sub_folder,"/")
file_list <- getURL(ftp_url_full, dirlistonly = TRUE)
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/"
sub_folder <- URLencode("Search results - Long-term performance test Jurkat")
ftp_url <- paste0("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/", sub_folder,"/")
file_list <- getURL(ftp_url_full, dirlistonly = TRUE)
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/"
sub_folder <- URLencode("Search results - Long-term performance test Jurkat")
ftp_url <- paste0("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/", sub_folder,"/")
file_list <- getURL(ftp_url, dirlistonly = TRUE)
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/"
sub_folder <- URLencode("Search results - Long-term performance test Jurkat")
ftp_url_full <- paste0("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/", sub_folder,"/")
file_list <- getURL(ftp_url_full, dirlistonly = TRUE)
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/"
sub_folder <- URLencode("Search results - Long-term performance test Jurkat")
ftp_url_full <- paste0("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/", sub_folder,"/")
file_list <- getURL(ftp_url, dirlistonly = TRUE)
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/"
sub_folder <- URLencode("Search results - Long-term performance test Jurkat")
ftp_url_full <- paste0("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/", sub_folder,"/")
file_list <- getURL(ftp_url, dirlistonly = TRUE)
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/"
sub_folder <- URLencode("Search results - Long-term performance test Jurkat")
ftp_url_full <- paste0("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/", sub_folder)
file_list <- getURL(ftp_url_full, dirlistonly = TRUE)
cat(file_list, sep = "\n")
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/"
sub_folder <- URLencode("Search results - Long-term performance test Jurkat")
ftp_url_full <- paste0("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/", sub_folder,"/")
file_list <- getURL(ftp_url_full, dirlistonly = TRUE)
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/"
sub_folder <- URLencode("Search results - Long-term performance test Jurkat")
ftp_url_full <- paste0("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/", sub_folder)
file_list <- getURL(ftp_url_full, dirlistonly = TRUE)
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/"
sub_folder <- URLencode("Search results - Long-term performance test Jurkat")
ftp_url_full <- paste0("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/", sub_folder)
file_list <- getURL(ftp_url_full, dirlistonly = TRUE)
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/"
sub_folder <- URLencode("Search results - Long-term performance test Jurkat")
ftp_url_full <- paste0("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/", sub_folder)
file_list <- getURL(ftp_url, dirlistonly = TRUE)
file_list <- getURL(ftp_url, dirlistonly = TRUE)
file_list <- NA
file_list <- getURL(ftp_url, dirlistonly = TRUE)
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/"
sub_folder <- URLencode("Search results - Long-term performance test Jurkat")
ftp_url_full <- paste0("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/", sub_folder)
file_list <- getURL(ftp_url, dirlistonly = TRUE)
ftp_file_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/proteinGroups_fdr0.01.txt"
download.file(ftp_file_url, destfile = "proteinGroups_fdr0.01.txt", mode = "wb")
ftp_file_url <- paste0(ftp_url_full, proteinGroups_fdr0.01.txt)
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/"
file_list <- getURL(ftp_url, dirlistonly = TRUE)
cat(file_list, sep = "\n")
sub_folder <- URLencode("Search results - Long-term performance test Jurkat")
ftp_url_full <- paste0("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/", sub_folder)
file_list <- getURL(ftp_url, dirlistonly = TRUE)
cat(file_list, sep = "\n")
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/"
file_list <- getURL(ftp_url, dirlistonly = TRUE)
cat(file_list, sep = "\n")
sub_folder <- URLencode("Search results - Long-term performance test Jurkat")
ftp_url_full <- paste0("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/", sub_folder,"/")
file_list <- getURL(ftp_url_full, dirlistonly = TRUE)
cat(file_list, sep = "\n")
file_list <- getURL(ftp_url_full, dirlistonly = TRUE)
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/"
file_list <- getURL(ftp_url, dirlistonly = TRUE)
ftp_url <- "ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/"
file_list <- getURL(ftp_url, dirlistonly = TRUE)
base_packages_to_install <- c(
"readr",
"readxl",
"tidyr",
"dplyr",
"purrr",
"ggplot2",
"drc"
)
my_packages_to_install <- c(
"Rcurl"
)
packages_to_install <- c(base_packages_to_install, my_packages_to_install)
# Check and install packages using a for loop
for (package in packages_to_install) {
if (!requireNamespace(package, quietly = TRUE)) {
install.packages(package)
}
library(package, character.only = TRUE)
}
base_packages_to_install <- c(
"readr",
"readxl",
"tidyr",
"dplyr",
"purrr",
"ggplot2",
"drc"
)
my_packages_to_install <- c(
"RCurl"
)
packages_to_install <- c(base_packages_to_install, my_packages_to_install)
# Check and install packages using a for loop
for (package in packages_to_install) {
if (!requireNamespace(package, quietly = TRUE)) {
install.packages(package)
}
library(package, character.only = TRUE)
}
ftp_url <- URLencode("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/Search results - Long-term performance test Jurkat")
file_list <- getURL(ftp_url, dirlistonly = TRUE)
cat(file_list, sep = "\n")
ftp_url <- URLencode("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/Search results - Long-term performance test Jurkat/")
file_list <- getURL(ftp_url, dirlistonly = TRUE)
cat(file_list, sep = "\n")
ftp_url <- URLencode("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/Search results - Long-term performance test Jurkat/")
file_list <- getURL(ftp_url)
cat(file_list, sep = "\n")
ftp_url <- URLencode("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/Search results - Long-term performance test Jurkat/Picked FDR PG")
file_list <- getURL(ftp_url)
ftp_url <- URLencode("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/Search results - Long-term performance test Jurkat/Picked FDR PG/")
file_list <- getURL(ftp_url)
cat(file_list, sep = "\n")
ftp_url <- URLencode("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/Search results - Long-term performance test Jurkat/Picked FDR PG/")
file_list <- getURL(ftp_url)
cat(file_list, sep = "\n")
ftp_url_file <- paste0(ftp_url,"proteinGroups_fdr0.01.txt")
download.file(ftp_url_file, destfile = "proteinGroups_fdr0.01.txt", mode = "wb")
doseresponse <- read_delim("proteinGroups_fdr0.01.txt") %>%
rename(Genes = `Gene names`)
head(doseresponse)
drugs <- read_xlsx("MassIVE_MappingSheet.xlsx", sheet=2, skip=1, col_names = c("Drug", "Number")) %>% pull(Drug)
ftp_url <- URLencode("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/Search results - Long-term performance test Jurkat/Picked FDR PG/")
file_list <- getURL(ftp_url)
cat(file_list, sep = "\n")
ftp_url_file <- paste0(ftp_url,"proteinGroups_fdr0.01.txt")
download.file(ftp_url_file, destfile = "data/proteinGroups_fdr0.01.txt", mode = "wb")
# Define folder name
data_dir <- "data"
# Create folder if it doesn't exist
if (!dir.exists(data_dir)) {
dir.create(data_dir)
cat("Created 'data' folder\n")
} else {
cat("'data' folder already exists\n")
}
ftp_url <- URLencode("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/Search results - Long-term performance test Jurkat/Picked FDR PG/")
file_list <- getURL(ftp_url)
cat(file_list, sep = "\n")
ftp_url_txt <- paste0(ftp_url,"proteinGroups_fdr0.01.txt")
download.file(ftp_url_txt, destfile = file.path(data_dir,"/proteinGroups_fdr0.01.txt"), mode = "wb")
download.file(ftp_url_txt, destfile = paste0(data_dir,"/proteinGroups_fdr0.01.txt"), mode = "wb")
ftp_url <- URLencode("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/")
file_list <- getURL(ftp_url)
cat(file_list, sep = "\n")
ftp_url <- URLencode("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/")
file_list <- getURL(ftp_url)
cat(file_list, sep = "\n")
ftp_url <- URLencode("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/metadata/")
file_list <- getURL(ftp_url)
cat(file_list, sep = "\n")
doseresponse <- read_delim("data/proteinGroups_fdr0.01.txt") %>%
rename(Genes = `Gene names`)
head(doseresponse)
doseresponse <- read_delim("data/proteinGroups_fdr0.01.txt", delim = "|") %>%
rename(Genes = `Gene names`)
doseresponse <- read_delim("data/proteinGroups_fdr0.01.txt") %>%
rename(Genes = `Gene names`)
head(doseresponse)
cat("data/proteinGroups_fdr0.01.txt")
readLines("data/proteinGroups_fdr0.01.txt")
doseresponse_raw <- read_delim("data/proteinGroups_fdr0.01.txt")
setwd("~/BIBC/AOLS/Project")
base_packages_to_install <- c(
"readr",
"readxl",
"tidyr",
"dplyr",
"purrr",
"ggplot2",
"drc"
)
my_packages_to_install <- c(
"RCurl"
)
packages_to_install <- c(base_packages_to_install, my_packages_to_install)
# Check and install packages using a for loop
for (package in packages_to_install) {
if (!requireNamespace(package, quietly = TRUE)) {
install.packages(package)
}
library(package, character.only = TRUE)
}
base_packages_to_install <- c(
"readr",
"readxl",
"tidyr",
"dplyr",
"purrr",
"ggplot2",
"drc"
)
my_packages_to_install <- c(
"RCurl"
)
packages_to_install <- c(base_packages_to_install, my_packages_to_install)
# Check and install packages using a for loop
for (package in packages_to_install) {
if (!requireNamespace(package, quietly = TRUE)) {
install.packages(package)
}
library(package, character.only = TRUE)
}
base_packages_to_install <- c(
"readr",
"readxl",
"tidyr",
"dplyr",
"purrr",
"ggplot2",
"drc"
)
my_packages_to_install <- c(
"RCurl"
)
packages_to_install <- c(base_packages_to_install, my_packages_to_install)
# Check and install packages using a for loop
for (package in packages_to_install) {
if (!requireNamespace(package, quietly = TRUE)) {
install.packages(package)
}
library(package, character.only = TRUE)
}
# Define folder name
data_dir <- "data"
# Create folder if it doesn't exist
if (!dir.exists(data_dir)) {
dir.create(data_dir)
cat("Created 'data' folder\n")
} else {
cat("'data' folder already exists\n")
}
txt_file <- paste0(data_dir,"/proteinGroups_fdr0.01.txt")
if (!file.exists(txt_file)) {
# If the file does not exist, download it
ftp_url_txt <- URLencode("ftp://massive-ftp.ucsd.edu/v06/MSV000093659/search/Search results - Long-term performance test Jurkat/Picked FDR PG/proteinGroups_fdr0.01.txt")
download.file(ftp_url_txt, destfile = txt_file, mode = "wb")
cat("Downloaded proteinGroups_fdr0.01.txt to 'data/' folder\n")
} else {
cat("File already exists in 'data/' folder, skipping download.\n")
}
readLines("data/proteinGroups_fdr0.01.txt", n=10)
doseresponse_raw <- read_delim(txt_file)
doseresponse <- doseresponse_raw %>%
rename(Genes = `Gene names`)
head(doseresponse)
xlsx_file <- file.path(data_dir, "MassIVE_MappingSheet.xlsx")
if (!file.exists(xlsx_file)) {
ftp_url_xlsx <- URLencode(
"ftp://massive-ftp.ucsd.edu/v06/MSV000093659/metadata/MassIVE_MappingSheet.xlsx"
)
download.file(ftp_url_xlsx, destfile = xlsx_file, mode = "wb")
cat("Downloaded MassIVE_MappingSheet.xlsx to 'data/' folder\n")
} else {
cat("File 'MassIVE_MappingSheet.xlsx' already exists, skipping download.\n")
}
setwd("~/BIBC/AOLS/Project")
